######### Globals #########

declare-option -hidden str rc_kak_exec %sh{
    kakoune_prefix="$(dirname $(dirname $kak_runtime))"
    kakoune_exec="kak"
    for k in "${kakoune_prefix}/bin/kak" \
             "${kakoune_prefix}/src/kak"; do
        if [ -x "${k}" ]; then
            kakoune_exec=${k}
            break
        fi
    done
    echo -n ${kakoune_exec}
}


######### Options #########

colorscheme tomorrow-night
addhl global/number-lines number-lines -relative -hlcursor
set-option global ui_options ncurses_assistant=cat


######### Basic Key Mappings #########

map global insert <tab> '<a-;><gt>'
map global insert <s-tab> '<a-;><lt>'


######### Tmux Integration #########

define-command -hidden -params 1.. rc-tmux-new-impl %{
    evaluate-commands %sh{
        orientation="$1"
        shift
        if [ $# -ne 0 ]; then
            kakoune_params="-e '$@'"
        fi
        echo "tmux-terminal-${orientation} ${kak_opt_rc_kak_exec} -c ${kak_session} ${kakoune_params}"
    }
}

define-command -params .. -command-completion rc-tmux-new-horizontal %{
    rc-tmux-new-impl 'horizontal' %arg{@}
}

define-command -params .. -command-completion rc-tmux-new-vertical %{
    rc-tmux-new-impl 'vertical' %arg{@}
}

define-command -params .. -command-completion rc-tmux-new-window %{
    rc-tmux-new-impl 'window' %arg{@}
}

declare-user-mode rc-tmux
map -docstring 'Tmux control'       global user    t ':enter-user-mode rc-tmux<ret>'
map -docstring 'Split horizontally' global rc-tmux h ':rc-tmux-new-horizontal<ret>'
map -docstring 'Split vertically'   global rc-tmux v ':rc-tmux-new-vertical<ret>'
map -docstring 'Create new window'  global rc-tmux w ':rc-tmux-new-window<ret>'
map -docstring 'Split horizontally and run command' global rc-tmux H ':rc-tmux-new-horizontal '
map -docstring 'Split vertically and run command'   global rc-tmux V ':rc-tmux-new-vertical '
map -docstring 'Create new window and run command'  global rc-tmux W ':rc-tmux-new-window '


######### StumpWM Integration #########

define-command -hidden -params 1.. rc-stumpwm-new-impl %{
    evaluate-commands %sh{
        if [ -z "${DISPLAY}" ]; then
            echo "echo -markup '{Error}Not in a GUI session'"
            exit
        fi
        cmd="$1"
        shift
        if [ $# -ne 0 ]; then
            kakoune_params="-e '$@'"
        fi
        if [ "${cmd}" != "nop" ]; then
            stumpish "rc-${cmd}-and-focus"
        fi
        stumpish "run-shell-command xterm -e ${kak_opt_rc_kak_exec} -c ${kak_session} ${kakoune_params}" < /dev/null > /dev/null 2>&1
    }
}

define-command -params .. -command-completion rc-stumpwm-new-horizontal %{
    rc-stumpwm-new-impl 'hsplit' %arg{@}
}

define-command -params .. -command-completion rc-stumpwm-new-vertical %{
    rc-stumpwm-new-impl 'vsplit' %arg{@}
}

define-command -params .. -command-completion rc-stumpwm-new-window %{
    rc-stumpwm-new-impl 'nop' %arg{@}
}

declare-user-mode rc-stumpwm
map -docstring 'StumpWM control'    global user       g ':enter-user-mode rc-stumpwm<ret>'
map -docstring 'Split horizontally' global rc-stumpwm h ':rc-stumpwm-new-horizontal<ret>'
map -docstring 'Split vertically'   global rc-stumpwm v ':rc-stumpwm-new-vertical<ret>'
map -docstring 'Create new window'  global rc-stumpwm w ':rc-stumpwm-new-window<ret>'
map -docstring 'Split horizontally and run command' global rc-stumpwm H ':rc-stumpwm-new-horizontal '
map -docstring 'Split vertically and run command'   global rc-stumpwm V ':rc-stumpwm-new-vertical '
map -docstring 'Create new window and run command'  global rc-stumpwm W ':rc-stumpwm-new-window '


######### Scheme Files #########

hook global WinSetOption filetype=scheme %{
    set-option window indentwidth 2
}
