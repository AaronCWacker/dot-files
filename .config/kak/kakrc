######### Globals #########

# Which terminal executable to use, for GUI integration
declare-option str rc_term_exec "kitty"

declare-option -hidden str rc_kak_exec %sh{
    kakoune_prefix="$(dirname $(dirname $kak_runtime))"
    kakoune_exec="kak"
    for k in "${kakoune_prefix}/bin/kak" \
             "${kakoune_prefix}/src/kak"; do
        if [ -x "${k}" ]; then
            kakoune_exec=${k}
            break
        fi
    done
    printf '%s' "${kakoune_exec}"
}

declare-option -hidden str rc_plug_kak_found %sh{
    if [ -f "${kak_config}/plugins/plug.kak/rc/plug.kak" ]; then
        printf 'yes'
    else
        printf 'no'
    fi
}

declare-option -hidden str rc_msg_not_in_tmux "{Error}Not in a tmux session"
declare-option -hidden str rc_msg_not_in_x    "{Error}Not in a GUI session"


######### Options #########

colorscheme tomorrow-night
addhl global/number-lines number-lines -relative -hlcursor
set-option global ui_options ncurses_assistant=cat


######### Basic Key Mappings #########

map global insert <tab> '<a-;><gt>'
map global insert <s-tab> '<a-;><lt>'


######### Tmux Integration #########

define-command -hidden -params 1.. rc-tmux-new-impl %{
    evaluate-commands %sh{
        if [ -z "${TMUX}" ]; then
            printf "echo -markup '%s'" "${kak_opt_rc_msg_not_in_tmux}"
            exit
        fi
        orientation="$1"
        shift
        if [ $# -ne 0 ]; then
            kakoune_params="-e '$@'"
        fi
        printf 'tmux-terminal-%s %s -c %s %s' "${orientation}" "${kak_opt_rc_kak_exec}" "${kak_session}" "${kakoune_params}"
    }
}

define-command -params .. -command-completion rc-tmux-new-horizontal %{
    rc-tmux-new-impl 'horizontal' %arg{@}
}

define-command -params .. -command-completion rc-tmux-new-vertical %{
    rc-tmux-new-impl 'vertical' %arg{@}
}

define-command -params .. -command-completion rc-tmux-new-window %{
    rc-tmux-new-impl 'window' %arg{@}
}

define-command -params 1 rc-tmux-copy-buffer %{
    evaluate-commands %sh{
        if [ -z "${TMUX}" ]; then
            printf "echo -markup '%s'" "${kak_opt_rc_msg_not_in_tmux}"
            exit
        fi
        cmd="$1"
        if [ ${cmd} = 'y' ]; then
            tmux set-buffer -- "${kak_selections}" > /dev/null 2>&1
            printf 'nop'
        else
            if [ ${cmd} = 'p' ]; then
                printf 'execute-keys <a-!>tmux<space>show-buffer<ret>'
            else # P
                printf 'execute-keys !tmux<space>show-buffer<ret>'
            fi
        fi
    }
}

declare-user-mode rc-tmux
map -docstring 'Tmux control'       global user    t ': enter-user-mode rc-tmux<ret>'
map -docstring 'Split horizontally' global rc-tmux h ': rc-tmux-new-horizontal<ret>'
map -docstring 'Split vertically'   global rc-tmux v ': rc-tmux-new-vertical<ret>'
map -docstring 'Create new window'  global rc-tmux w ': rc-tmux-new-window<ret>'
map -docstring 'Split horizontally and run command' global rc-tmux H ': rc-tmux-new-horizontal '
map -docstring 'Split vertically and run command'   global rc-tmux V ': rc-tmux-new-vertical '
map -docstring 'Create new window and run command'  global rc-tmux W ': rc-tmux-new-window '
map -docstring 'Yank to copy buffer'    global rc-tmux y ': rc-tmux-copy-buffer y<ret>'
map -docstring 'Paste from copy buffer' global rc-tmux p ': rc-tmux-copy-buffer p<ret>'
map -docstring 'Paste from copy buffer, after current selection' global rc-tmux P ': rc-tmux-copy-buffer P<ret>'


######### StumpWM Integration #########

define-command -hidden -params 1.. rc-stumpwm-new-impl %{
    evaluate-commands %sh{
        if [ -z "${DISPLAY}" ]; then
            printf "echo -markup '%s'" "${kak_opt_rc_msg_not_in_x}"
            exit
        fi
        cmd="$1"
        shift
        if [ $# -ne 0 ]; then
            kakoune_params="-e '$@'"
        fi
        if [ "${cmd}" != "nop" ]; then
            stumpish "${cmd}-and-focus" < /dev/null > /dev/null 2>&1
        fi
        stumpish "run-shell-command ${kak_opt_rc_term_exec} -e ${kak_opt_rc_kak_exec} -c ${kak_session} ${kakoune_params}" < /dev/null > /dev/null 2>&1
    }
}

define-command -params .. -command-completion rc-stumpwm-new-horizontal %{
    rc-stumpwm-new-impl 'hsplit' %arg{@}
}

define-command -params .. -command-completion rc-stumpwm-new-vertical %{
    rc-stumpwm-new-impl 'vsplit' %arg{@}
}

define-command -params .. -command-completion rc-stumpwm-new-window %{
    rc-stumpwm-new-impl 'nop' %arg{@}
}

define-command -params 1.. rc-x-selection %{
    evaluate-commands %sh{
        if [ -z "${DISPLAY}" ]; then
            printf "echo -markup '%s'" "${kak_opt_rc_msg_not_in_x}"
            exit
        fi
        cmd="$1"
        shift
        if [ $# -ne 0 ]; then
            target="$1"
        else
            target="primary"
        fi
        if [ ${cmd} = 'y' ]; then
            printf '%s' "$kak_selections" | xsel --input --${target} > /dev/null 2>&1
            printf 'nop'
        else
            if [ ${cmd} = 'p' ]; then
                printf 'execute-keys <a-!>xsel<space>--output<space>--%s<ret>' "${target}"
            else # P
                printf 'execute-keys !xsel<space>--output<space>--%s<ret>' "${target}"
            fi
        fi
    }
}

declare-user-mode rc-stumpwm
map -docstring 'StumpWM control'    global user       g ': enter-user-mode rc-stumpwm<ret>'
map -docstring 'Split horizontally' global rc-stumpwm h ': rc-stumpwm-new-horizontal<ret>'
map -docstring 'Split vertically'   global rc-stumpwm v ': rc-stumpwm-new-vertical<ret>'
map -docstring 'Create new window'  global rc-stumpwm w ': rc-stumpwm-new-window<ret>'
map -docstring 'Split horizontally and run command' global rc-stumpwm H ': rc-stumpwm-new-horizontal '
map -docstring 'Split vertically and run command'   global rc-stumpwm V ': rc-stumpwm-new-vertical '
map -docstring 'Create new window and run command'  global rc-stumpwm W ': rc-stumpwm-new-window '
map -docstring 'Yank to clipboard'    global rc-stumpwm y ': rc-x-selection y clipboard<ret>'
map -docstring 'Paste from clipboard' global rc-stumpwm p ': rc-x-selection p clipboard<ret>'
map -docstring 'Paste from clipboard, after current selection' global rc-stumpwm P ': rc-x-selection P clipboard<ret>'


######### Plug.kak Integration #########

evaluate-commands %sh{
    if [ "$kak_opt_rc_plug_kak_found" = "yes" ]; then
        printf 'source "%s/plugins/plug.kak/rc/plug.kak"\n' "${kak_config}"
        printf 'plug "robertmeta/plug.kak" branch "dev" noload\n'
        printf 'plug "andreyorst/fzf.kak" config %%{
                    map -docstring "fzf mode" global user f ": fzf-mode<ret>"
                }\n'
        printf 'plug "ul/kak-lsp" noload do %%{
                    cargo install --locked --force --path .
                }\n'
        printf 'plug "eraserhd/parinfer-rust" do %%{
                    cargo install --locked --force --path .
                } config %%{
                    hook global WinSetOption filetype=(clojure|lisp|scheme|racket) %%{
                        parinfer-enable-window -smart
                    }
                }\n'
        printf 'plug "TeddyDD/kakoune-wiki" config %%{
                    wiki-setup %%sh{ printf "%%s/notes" "${HOME}" }
                }\n'
    else
        printf 'nop'
    fi
}


######### Kak-lsp Integration #########

map -docstring 'Enable kak-lsp' global user l ': rc-enable-kak-lsp<ret>'

define-command -hidden -params .. rc-enable-kak-lsp %{
    evaluate-commands %sh{
        if which kak-lsp > /dev/null 2>&1; then
            kak-lsp --kakoune -s $kak_session
            if [ $# -ne 0 -a "$1" = "debug" ]; then
                kak-lsp -s $kak_session -vvv > /tmp/kak-lsp.log 2>&1 < /dev/null &
            fi
        else
            printf "echo -markup '{Error}kak-lsp command not found'"
        fi
    }
    hook -group rc-kak-lsp-switch global WinSetOption filetype=(python) %{
        lsp-enable-window
    }
    map -docstring 'kak-lsp' global user l ': enter-user-mode lsp<ret>'
}


######### Lisp Files #########

hook -group rc-lisp-switch global WinSetOption filetype=(lisp|scheme) %{
    set-option window indentwidth 2
}
